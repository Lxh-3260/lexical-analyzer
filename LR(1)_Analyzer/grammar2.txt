#S是整个源代码source_program的开始，A是一个个函数（因为源代码是由一个个函数定义的）
S->A
#B表示每个函数体的定义,A能推向空（@表示空）是因为源程序可以由0个及以上的函数体组成
A->BA
A->@
#B表示每个函数体的定义，每个函数体的定义由：函数返回值类型 函数名(参数){函数声明} 这几个部分组成
#函数返回类型type为t，函数名为一个合法的标识符，函数名因为是一个identifier标识符，故用终结符i表示
B->ti(D){E}
#在input_token 读入语法分析时，type分为vcifd分别对应void char int float double，读到他们转为t即可
#(D)为函数的参数部分，可以由0个及以上的：类型 标识符组成
D->ti
D->ti,D
D->@
#{E}为函数的主体声明部分，也就是主函数体，可以为空
#E还可以由一些返回语句，声明语句，赋值语句，判断语句，循环语句，条件分支转移语句组成，这些语句用F推出
E->FE
E->@
#G为返回语句，r表示return，n表示number，i表示标识符
#return也可以返回运算式子，比如说return 2+a*(b+c)/3（也就是K，下面有定义K表示一串运算式子）
F->G
G->rn;
G->ri;
G->rK;
#H为声明语句，I为赋值语句，由一个：type identifier; 或者type identifier o= value;组成其中o为计算运算符+-*/&^%|
#t为type，J表示value，可以直接是一个number（常量包括科学计数法和虚数）
#K表示是number，标识符和运算符的结合，是运算语句，可以有括号运算
#L表示判断语句（没有；因为判断语句是在ifwhile等语句的括号中写的），其中p为< > == != <= >=表示判断的运算符
F->H
H->ti;
H->ti=J;
H->ti=K;
F->I
I->i=J;
I->io=J;
I->i=K;
I->io=K;
J->i
J->n
K->JoK
K->J
K->(K)
L->JpJ
#M为循环语句，f为for，N为for括号里的内容，E为函数体的声明，上面定义过了
#for循环体的三个变量其实都可以为空，多7种排列组合，不再加以赘述
#H为声明语句，I为赋值语句，L为判断语句，这两个是上面定义过的，注意H和I后面是有分号的，所以N的定义中不需要分号
#O为不带分号的赋值语句，直接把上面的赋值语句复制过来去掉分号
#w表示while，L为判断语句
F->M
M->f(N){E}
N->HL;O
N->IL;O
O->i=J
O->io=J
O->i=K
O->io=K
M->w(L){E}
#P为分支转移，j表示if，k表示else
F->P
P->j(L){E}
P->j(L){E}k{E}
#Q,R为循环语句中的跳转语句b表示break,c表示continue
F->Q
Q->b;
F->R
R->c;
#endread